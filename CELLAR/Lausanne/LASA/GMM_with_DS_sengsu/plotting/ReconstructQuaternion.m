function q = ReconstructQaternion(s,p)
    s = s / dot(s,s)^0.5;
    if (exist('p','var'))
        p = p / dot(p, p)^0.5;
        [x,y,z] = ReconstructFrame(s,p);
    else
        [x,y,z] = ReconstructFrame(s);
    end;
    
   A = [x y z];
   
   q = quater();
   
   v = zeros(4,1);
   
   v(1, 1) = 0.5 *(A(1,1) + A(2,2) + A(3,3) + 1) ^ 0.5;
   
   if (v (1, 1) < 10 ^ (-3))
       v(2,1) = (A(1,3)*A(1,2))/(A(1,2)^2*A(1,3)^2 + A(1,2)^2*A(2,3)^2 + A(1,3)^2*A(2,3)^2) ^ 0.5;
       v(3,1) = (A(1,2)*A(2,3))/(A(1,2)^2*A(1,3)^2 + A(1,2)^2*A(2,3)^2 + A(1,3)^2*A(2,3)^2) ^ 0.5;
       v(4,1) = (A(1,3)*A(2,3))/(A(1,2)^2*A(1,3)^2 + A(1,2)^2*A(2,3)^2 + A(1,3)^2*A(2,3)^2) ^ 0.5;


   else
       
       v(2,1) = (A(3,2) - A(2,3)) / (4 * v(1,1));
       v(3,1) = (A(1,3) - A(3,1)) / (4 * v(1,1));
       v(4,1) = (A(2,1) - A(1,2)) / (4 * v(1,1));
    
   end;
   
   q.o = v;